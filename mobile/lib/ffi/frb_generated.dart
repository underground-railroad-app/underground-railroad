// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -166108802;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'underground_railroad_ffi',
    ioDirectory: '../ffi/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiAddContact({required String name, required String fingerprintWords});

  Future<String> crateApiCreateEmergency(
      {required List<String> needs, required String region, required String urgency, required int numPeople});

  Future<List<ContactInfo>> crateApiGetContacts();

  Future<List<ConversationInfo>> crateApiGetConversations();

  Future<List<MessageInfo>> crateApiGetMessages({required String contactId, required int limit});

  Future<NetworkStatus> crateApiGetStatus();

  Future<String> crateApiInitialize({required String name, required String password, required String dataDir});

  Future<void> crateApiMarkMessageRead({required String messageId});

  Future<String> crateApiRegisterSafeHouse({required String name, required String region, required int capacity});

  Future<String> crateApiSendMessage({required String contactId, required String content});

  Future<void> crateApiShutdown();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiAddContact({required String name, required String fingerprintWords}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_String(fingerprintWords, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiAddContactConstMeta,
      argValues: [name, fingerprintWords],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAddContactConstMeta => const TaskConstMeta(
        debugName: "add_contact",
        argNames: ["name", "fingerprintWords"],
      );

  @override
  Future<String> crateApiCreateEmergency(
      {required List<String> needs, required String region, required String urgency, required int numPeople}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_String(needs, serializer);
        sse_encode_String(region, serializer);
        sse_encode_String(urgency, serializer);
        sse_encode_u_32(numPeople, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiCreateEmergencyConstMeta,
      argValues: [needs, region, urgency, numPeople],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCreateEmergencyConstMeta => const TaskConstMeta(
        debugName: "create_emergency",
        argNames: ["needs", "region", "urgency", "numPeople"],
      );

  @override
  Future<List<ContactInfo>> crateApiGetContacts() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_contact_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiGetContactsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetContactsConstMeta => const TaskConstMeta(
        debugName: "get_contacts",
        argNames: [],
      );

  @override
  Future<List<ConversationInfo>> crateApiGetConversations() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_conversation_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiGetConversationsConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetConversationsConstMeta => const TaskConstMeta(
        debugName: "get_conversations",
        argNames: [],
      );

  @override
  Future<List<MessageInfo>> crateApiGetMessages({required String contactId, required int limit}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(contactId, serializer);
        sse_encode_u_32(limit, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_message_info,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiGetMessagesConstMeta,
      argValues: [contactId, limit],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetMessagesConstMeta => const TaskConstMeta(
        debugName: "get_messages",
        argNames: ["contactId", "limit"],
      );

  @override
  Future<NetworkStatus> crateApiGetStatus() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_network_status,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiGetStatusConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiGetStatusConstMeta => const TaskConstMeta(
        debugName: "get_status",
        argNames: [],
      );

  @override
  Future<String> crateApiInitialize({required String name, required String password, required String dataDir}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_String(password, serializer);
        sse_encode_String(dataDir, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiInitializeConstMeta,
      argValues: [name, password, dataDir],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiInitializeConstMeta => const TaskConstMeta(
        debugName: "initialize",
        argNames: ["name", "password", "dataDir"],
      );

  @override
  Future<void> crateApiMarkMessageRead({required String messageId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(messageId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiMarkMessageReadConstMeta,
      argValues: [messageId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiMarkMessageReadConstMeta => const TaskConstMeta(
        debugName: "mark_message_read",
        argNames: ["messageId"],
      );

  @override
  Future<String> crateApiRegisterSafeHouse({required String name, required String region, required int capacity}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        sse_encode_String(region, serializer);
        sse_encode_u_32(capacity, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiRegisterSafeHouseConstMeta,
      argValues: [name, region, capacity],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiRegisterSafeHouseConstMeta => const TaskConstMeta(
        debugName: "register_safe_house",
        argNames: ["name", "region", "capacity"],
      );

  @override
  Future<String> crateApiSendMessage({required String contactId, required String content}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(contactId, serializer);
        sse_encode_String(content, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiSendMessageConstMeta,
      argValues: [contactId, content],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendMessageConstMeta => const TaskConstMeta(
        debugName: "send_message",
        argNames: ["contactId", "content"],
      );

  @override
  Future<void> crateApiShutdown() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_String,
      ),
      constMeta: kCrateApiShutdownConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiShutdownConstMeta => const TaskConstMeta(
        debugName: "shutdown",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_i_64(raw);
  }

  @protected
  ContactInfo dco_decode_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ContactInfo(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      fingerprint: dco_decode_String(arr[2]),
    );
  }

  @protected
  ConversationInfo dco_decode_conversation_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ConversationInfo(
      contactId: dco_decode_String(arr[0]),
      contactName: dco_decode_String(arr[1]),
      messageCount: dco_decode_u_32(arr[2]),
      unreadCount: dco_decode_u_32(arr[3]),
      lastMessage: dco_decode_opt_String(arr[4]),
      lastMessageTime: dco_decode_opt_box_autoadd_i_64(arr[5]),
    );
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<ContactInfo> dco_decode_list_contact_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_contact_info).toList();
  }

  @protected
  List<ConversationInfo> dco_decode_list_conversation_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_conversation_info).toList();
  }

  @protected
  List<MessageInfo> dco_decode_list_message_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_message_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  MessageInfo dco_decode_message_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return MessageInfo(
      id: dco_decode_String(arr[0]),
      senderId: dco_decode_String(arr[1]),
      recipientId: dco_decode_String(arr[2]),
      content: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
      direction: dco_decode_String(arr[5]),
      createdAt: dco_decode_i_64(arr[6]),
      isRead: dco_decode_bool(arr[7]),
    );
  }

  @protected
  NetworkStatus dco_decode_network_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return NetworkStatus(
      veilidConnected: dco_decode_bool(arr[0]),
      contactsCount: dco_decode_u_32(arr[1]),
      emergenciesCount: dco_decode_u_32(arr[2]),
      safeHousesCount: dco_decode_u_32(arr[3]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_i_64(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_i_64(deserializer));
  }

  @protected
  ContactInfo sse_decode_contact_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    return ContactInfo(id: var_id, name: var_name, fingerprint: var_fingerprint);
  }

  @protected
  ConversationInfo sse_decode_conversation_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_contactId = sse_decode_String(deserializer);
    var var_contactName = sse_decode_String(deserializer);
    var var_messageCount = sse_decode_u_32(deserializer);
    var var_unreadCount = sse_decode_u_32(deserializer);
    var var_lastMessage = sse_decode_opt_String(deserializer);
    var var_lastMessageTime = sse_decode_opt_box_autoadd_i_64(deserializer);
    return ConversationInfo(
        contactId: var_contactId,
        contactName: var_contactName,
        messageCount: var_messageCount,
        unreadCount: var_unreadCount,
        lastMessage: var_lastMessage,
        lastMessageTime: var_lastMessageTime);
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<ContactInfo> sse_decode_list_contact_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ContactInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_contact_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<ConversationInfo> sse_decode_list_conversation_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ConversationInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_conversation_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<MessageInfo> sse_decode_list_message_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MessageInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_message_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  MessageInfo sse_decode_message_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_senderId = sse_decode_String(deserializer);
    var var_recipientId = sse_decode_String(deserializer);
    var var_content = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_direction = sse_decode_String(deserializer);
    var var_createdAt = sse_decode_i_64(deserializer);
    var var_isRead = sse_decode_bool(deserializer);
    return MessageInfo(
        id: var_id,
        senderId: var_senderId,
        recipientId: var_recipientId,
        content: var_content,
        status: var_status,
        direction: var_direction,
        createdAt: var_createdAt,
        isRead: var_isRead);
  }

  @protected
  NetworkStatus sse_decode_network_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_veilidConnected = sse_decode_bool(deserializer);
    var var_contactsCount = sse_decode_u_32(deserializer);
    var var_emergenciesCount = sse_decode_u_32(deserializer);
    var var_safeHousesCount = sse_decode_u_32(deserializer);
    return NetworkStatus(
        veilidConnected: var_veilidConnected,
        contactsCount: var_contactsCount,
        emergenciesCount: var_emergenciesCount,
        safeHousesCount: var_safeHousesCount);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_i_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self, serializer);
  }

  @protected
  void sse_encode_contact_info(ContactInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.fingerprint, serializer);
  }

  @protected
  void sse_encode_conversation_info(ConversationInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.contactId, serializer);
    sse_encode_String(self.contactName, serializer);
    sse_encode_u_32(self.messageCount, serializer);
    sse_encode_u_32(self.unreadCount, serializer);
    sse_encode_opt_String(self.lastMessage, serializer);
    sse_encode_opt_box_autoadd_i_64(self.lastMessageTime, serializer);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_contact_info(List<ContactInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_contact_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_conversation_info(List<ConversationInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_conversation_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_message_info(List<MessageInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_message_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_message_info(MessageInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.senderId, serializer);
    sse_encode_String(self.recipientId, serializer);
    sse_encode_String(self.content, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.direction, serializer);
    sse_encode_i_64(self.createdAt, serializer);
    sse_encode_bool(self.isRead, serializer);
  }

  @protected
  void sse_encode_network_status(NetworkStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.veilidConnected, serializer);
    sse_encode_u_32(self.contactsCount, serializer);
    sse_encode_u_32(self.emergenciesCount, serializer);
    sse_encode_u_32(self.safeHousesCount, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_i_64(PlatformInt64? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_i_64(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
